package edu.usfca.dataflow.TeamQuiz02;

import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.values.KV;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Problem1 {
  // TODO - Problem 1:
  // If you run 'test01' in 'TestProblem1' class in 'TeamQuiz02' package,
  // you will be able to see some console output (which changes each time you run).
  // Note that the test uses 3 input elements to begin with.
  //
  // This DoFn prints to the console each time 'start()' method (startBundle) is called,
  // and it's printing with a randomly generated integer that can be used by us to differentiate different bundles.
  //
  // (a) When you TestProblem1.test1() as-is, then you'll probably see the console output that indicates that
  // there are 3 bundles generated by the runner, like this (the random numbers will be different each time):
  // [START BUNDLE 743037 (param = 10)]
  // [START BUNDLE 685528 (param = 10)]
  // [START BUNDLE 902703 (param = 10)]
  //	[685528] Processing: B (11)
  //	[743037] Processing: A (1)
  //	[902703] Processing: C (21)
  // [THE END 685528]:
  // [THE END 743037]: A
  // [THE END 902703]:
  //
  // (b) When you run it after commenting out the marked line in the setup() method below,
  // you'll probably see that the console output implies there is only 1 bundle generated by the runner.
  // (Yet, it's still 3 bundles.)
  // [START BUNDLE 148939 (param = 10)]
  // [START BUNDLE 148939 (param = 10)]
  // [START BUNDLE 148939 (param = 10)]
  //	[148939] Processing: C (21)
  //	[148939] Processing: A (1)
  //	[148939] Processing: B (11)
  // [THE END 148939]: A
  // [THE END 148939]:
  // [THE END 148939]:
  //
  // Question: Why is this happening, even when we use random integers (determined for each bundle) for bundleIds?
  public static class MyDoFn1 extends DoFn<KV<String, Integer>, String> {
    int param = 0;
    List<String> buffer;
    int bundleId = 0;
    Random rnd;

    public MyDoFn1(int param) {
      this.param = param;
      rnd = new Random();
    }

    @Setup public void setup() {
      buffer = new ArrayList<>();
      //      rnd = new Random(); // <- Comment this line for "(b)". Keep this uncommented for "(a)".
    }

    @StartBundle public void start() {
      bundleId = rnd.nextInt(1_000_000);
      System.out.format("[START BUNDLE %6d (param = %d)]\n", bundleId, param);
      System.out.flush();
    }

    @ProcessElement public void process(ProcessContext c) {
      System.out.format("\t[%6d] Processing: %s (%d)\n", bundleId, c.element().getKey(), c.element().getValue());
      System.out.flush();
      if (c.element().getValue() >= param) {
        c.output(c.element().getKey());
      } else {
        buffer.add(c.element().getKey());
      }
    }

    @FinishBundle public void finish() {
      System.out.format("[THE END %6d]: %s\n", bundleId, String.join(" ", buffer));
      System.out.flush();
    }

    @Teardown public void teardown() {
      buffer = null;
    }
  }
}
